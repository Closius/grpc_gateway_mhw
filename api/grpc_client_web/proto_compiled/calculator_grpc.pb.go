// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: calculator.proto

package grpc_client_web

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorClient interface {
	NewTestSet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTestSetResponse, error)
	ChangeSettings(ctx context.Context, in *ChangeSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DoMath(ctx context.Context, in *DoMathRequest, opts ...grpc.CallOption) (*DoMathResponse, error)
	ListToDict(ctx context.Context, in *ListToDictRequest, opts ...grpc.CallOption) (*ListToDictResponse, error)
	DictToList(ctx context.Context, in *DictToListRequest, opts ...grpc.CallOption) (*DictToListResponse, error)
	StartLongProcessStreaming(ctx context.Context, in *StartLongProcessStreamingRequest, opts ...grpc.CallOption) (Calculator_StartLongProcessStreamingClient, error)
	StopLongProcessStreaming(ctx context.Context, in *StopLongProcessStreamingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) NewTestSet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTestSetResponse, error) {
	out := new(NewTestSetResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/NewTestSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) ChangeSettings(ctx context.Context, in *ChangeSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/ChangeSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) DoMath(ctx context.Context, in *DoMathRequest, opts ...grpc.CallOption) (*DoMathResponse, error) {
	out := new(DoMathResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/DoMath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) ListToDict(ctx context.Context, in *ListToDictRequest, opts ...grpc.CallOption) (*ListToDictResponse, error) {
	out := new(ListToDictResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/ListToDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) DictToList(ctx context.Context, in *DictToListRequest, opts ...grpc.CallOption) (*DictToListResponse, error) {
	out := new(DictToListResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/DictToList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) StartLongProcessStreaming(ctx context.Context, in *StartLongProcessStreamingRequest, opts ...grpc.CallOption) (Calculator_StartLongProcessStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[0], "/calculator.Calculator/StartLongProcessStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorStartLongProcessStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_StartLongProcessStreamingClient interface {
	Recv() (*StartLongProcessStreamingResponse, error)
	grpc.ClientStream
}

type calculatorStartLongProcessStreamingClient struct {
	grpc.ClientStream
}

func (x *calculatorStartLongProcessStreamingClient) Recv() (*StartLongProcessStreamingResponse, error) {
	m := new(StartLongProcessStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) StopLongProcessStreaming(ctx context.Context, in *StopLongProcessStreamingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/StopLongProcessStreaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility
type CalculatorServer interface {
	NewTestSet(context.Context, *emptypb.Empty) (*NewTestSetResponse, error)
	ChangeSettings(context.Context, *ChangeSettingsRequest) (*emptypb.Empty, error)
	DoMath(context.Context, *DoMathRequest) (*DoMathResponse, error)
	ListToDict(context.Context, *ListToDictRequest) (*ListToDictResponse, error)
	DictToList(context.Context, *DictToListRequest) (*DictToListResponse, error)
	StartLongProcessStreaming(*StartLongProcessStreamingRequest, Calculator_StartLongProcessStreamingServer) error
	StopLongProcessStreaming(context.Context, *StopLongProcessStreamingRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (UnimplementedCalculatorServer) NewTestSet(context.Context, *emptypb.Empty) (*NewTestSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTestSet not implemented")
}
func (UnimplementedCalculatorServer) ChangeSettings(context.Context, *ChangeSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSettings not implemented")
}
func (UnimplementedCalculatorServer) DoMath(context.Context, *DoMathRequest) (*DoMathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMath not implemented")
}
func (UnimplementedCalculatorServer) ListToDict(context.Context, *ListToDictRequest) (*ListToDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListToDict not implemented")
}
func (UnimplementedCalculatorServer) DictToList(context.Context, *DictToListRequest) (*DictToListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictToList not implemented")
}
func (UnimplementedCalculatorServer) StartLongProcessStreaming(*StartLongProcessStreamingRequest, Calculator_StartLongProcessStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLongProcessStreaming not implemented")
}
func (UnimplementedCalculatorServer) StopLongProcessStreaming(context.Context, *StopLongProcessStreamingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopLongProcessStreaming not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_NewTestSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).NewTestSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/NewTestSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).NewTestSet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_ChangeSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).ChangeSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/ChangeSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).ChangeSettings(ctx, req.(*ChangeSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_DoMath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoMathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).DoMath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/DoMath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).DoMath(ctx, req.(*DoMathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_ListToDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).ListToDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/ListToDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).ListToDict(ctx, req.(*ListToDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_DictToList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictToListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).DictToList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/DictToList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).DictToList(ctx, req.(*DictToListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_StartLongProcessStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartLongProcessStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).StartLongProcessStreaming(m, &calculatorStartLongProcessStreamingServer{stream})
}

type Calculator_StartLongProcessStreamingServer interface {
	Send(*StartLongProcessStreamingResponse) error
	grpc.ServerStream
}

type calculatorStartLongProcessStreamingServer struct {
	grpc.ServerStream
}

func (x *calculatorStartLongProcessStreamingServer) Send(m *StartLongProcessStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Calculator_StopLongProcessStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopLongProcessStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).StopLongProcessStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/StopLongProcessStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).StopLongProcessStreaming(ctx, req.(*StopLongProcessStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTestSet",
			Handler:    _Calculator_NewTestSet_Handler,
		},
		{
			MethodName: "ChangeSettings",
			Handler:    _Calculator_ChangeSettings_Handler,
		},
		{
			MethodName: "DoMath",
			Handler:    _Calculator_DoMath_Handler,
		},
		{
			MethodName: "ListToDict",
			Handler:    _Calculator_ListToDict_Handler,
		},
		{
			MethodName: "DictToList",
			Handler:    _Calculator_DictToList_Handler,
		},
		{
			MethodName: "StopLongProcessStreaming",
			Handler:    _Calculator_StopLongProcessStreaming_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLongProcessStreaming",
			Handler:       _Calculator_StartLongProcessStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
