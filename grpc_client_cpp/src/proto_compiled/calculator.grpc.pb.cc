// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calculator.proto

#include "calculator.pb.h"
#include "calculator.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace calculator {

static const char* Calculator_method_names[] = {
  "/calculator.Calculator/NewTestSet",
  "/calculator.Calculator/ChangeSettings",
  "/calculator.Calculator/DoMath",
  "/calculator.Calculator/ListToDict",
  "/calculator.Calculator/DictToList",
};

std::unique_ptr< Calculator::Stub> Calculator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Calculator::Stub> stub(new Calculator::Stub(channel, options));
  return stub;
}

Calculator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NewTestSet_(Calculator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeSettings_(Calculator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoMath_(Calculator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListToDict_(Calculator_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DictToList_(Calculator_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Calculator::Stub::NewTestSet(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::calculator::NewTestSet_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::calculator::NewTestSet_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewTestSet_, context, request, response);
}

void Calculator::Stub::async::NewTestSet(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::calculator::NewTestSet_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::calculator::NewTestSet_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewTestSet_, context, request, response, std::move(f));
}

void Calculator::Stub::async::NewTestSet(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::calculator::NewTestSet_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewTestSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::NewTestSet_response>* Calculator::Stub::PrepareAsyncNewTestSetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::NewTestSet_response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewTestSet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::NewTestSet_response>* Calculator::Stub::AsyncNewTestSetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewTestSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::ChangeSettings(::grpc::ClientContext* context, const ::calculator::ChangeSettings_request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::ChangeSettings_request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeSettings_, context, request, response);
}

void Calculator::Stub::async::ChangeSettings(::grpc::ClientContext* context, const ::calculator::ChangeSettings_request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::ChangeSettings_request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeSettings_, context, request, response, std::move(f));
}

void Calculator::Stub::async::ChangeSettings(::grpc::ClientContext* context, const ::calculator::ChangeSettings_request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Calculator::Stub::PrepareAsyncChangeSettingsRaw(::grpc::ClientContext* context, const ::calculator::ChangeSettings_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::calculator::ChangeSettings_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Calculator::Stub::AsyncChangeSettingsRaw(::grpc::ClientContext* context, const ::calculator::ChangeSettings_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::DoMath(::grpc::ClientContext* context, const ::calculator::DoMath_request& request, ::calculator::DoMath_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::DoMath_request, ::calculator::DoMath_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoMath_, context, request, response);
}

void Calculator::Stub::async::DoMath(::grpc::ClientContext* context, const ::calculator::DoMath_request* request, ::calculator::DoMath_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::DoMath_request, ::calculator::DoMath_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoMath_, context, request, response, std::move(f));
}

void Calculator::Stub::async::DoMath(::grpc::ClientContext* context, const ::calculator::DoMath_request* request, ::calculator::DoMath_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoMath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::DoMath_response>* Calculator::Stub::PrepareAsyncDoMathRaw(::grpc::ClientContext* context, const ::calculator::DoMath_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::DoMath_response, ::calculator::DoMath_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoMath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::DoMath_response>* Calculator::Stub::AsyncDoMathRaw(::grpc::ClientContext* context, const ::calculator::DoMath_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoMathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::ListToDict(::grpc::ClientContext* context, const ::calculator::ListToDict_request& request, ::calculator::ListToDict_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::ListToDict_request, ::calculator::ListToDict_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListToDict_, context, request, response);
}

void Calculator::Stub::async::ListToDict(::grpc::ClientContext* context, const ::calculator::ListToDict_request* request, ::calculator::ListToDict_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::ListToDict_request, ::calculator::ListToDict_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListToDict_, context, request, response, std::move(f));
}

void Calculator::Stub::async::ListToDict(::grpc::ClientContext* context, const ::calculator::ListToDict_request* request, ::calculator::ListToDict_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListToDict_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::ListToDict_response>* Calculator::Stub::PrepareAsyncListToDictRaw(::grpc::ClientContext* context, const ::calculator::ListToDict_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::ListToDict_response, ::calculator::ListToDict_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListToDict_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::ListToDict_response>* Calculator::Stub::AsyncListToDictRaw(::grpc::ClientContext* context, const ::calculator::ListToDict_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListToDictRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::DictToList(::grpc::ClientContext* context, const ::calculator::DictToList_request& request, ::calculator::DictToList_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::DictToList_request, ::calculator::DictToList_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DictToList_, context, request, response);
}

void Calculator::Stub::async::DictToList(::grpc::ClientContext* context, const ::calculator::DictToList_request* request, ::calculator::DictToList_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::DictToList_request, ::calculator::DictToList_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DictToList_, context, request, response, std::move(f));
}

void Calculator::Stub::async::DictToList(::grpc::ClientContext* context, const ::calculator::DictToList_request* request, ::calculator::DictToList_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DictToList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::DictToList_response>* Calculator::Stub::PrepareAsyncDictToListRaw(::grpc::ClientContext* context, const ::calculator::DictToList_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::DictToList_response, ::calculator::DictToList_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DictToList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::DictToList_response>* Calculator::Stub::AsyncDictToListRaw(::grpc::ClientContext* context, const ::calculator::DictToList_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDictToListRaw(context, request, cq);
  result->StartCall();
  return result;
}

Calculator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::google::protobuf::Empty, ::calculator::NewTestSet_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::calculator::NewTestSet_response* resp) {
               return service->NewTestSet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::ChangeSettings_request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::ChangeSettings_request* req,
             ::google::protobuf::Empty* resp) {
               return service->ChangeSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::DoMath_request, ::calculator::DoMath_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::DoMath_request* req,
             ::calculator::DoMath_response* resp) {
               return service->DoMath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::ListToDict_request, ::calculator::ListToDict_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::ListToDict_request* req,
             ::calculator::ListToDict_response* resp) {
               return service->ListToDict(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::DictToList_request, ::calculator::DictToList_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::DictToList_request* req,
             ::calculator::DictToList_response* resp) {
               return service->DictToList(ctx, req, resp);
             }, this)));
}

Calculator::Service::~Service() {
}

::grpc::Status Calculator::Service::NewTestSet(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::calculator::NewTestSet_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::ChangeSettings(::grpc::ServerContext* context, const ::calculator::ChangeSettings_request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::DoMath(::grpc::ServerContext* context, const ::calculator::DoMath_request* request, ::calculator::DoMath_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::ListToDict(::grpc::ServerContext* context, const ::calculator::ListToDict_request* request, ::calculator::ListToDict_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::DictToList(::grpc::ServerContext* context, const ::calculator::DictToList_request* request, ::calculator::DictToList_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace calculator

